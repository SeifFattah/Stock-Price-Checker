const express = require('express');
const helmet = require('helmet');
const cors = require('cors');
const axios = require('axios');
const mongoose = require('mongoose');

const app = express();
app.use(helmet());
app.use(cors());
app.use(express.json());

// Connect to MongoDB database
mongoose.connect('mongodb://localhost/stock_prices', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Define the stock schema and model using Mongoose
const stockSchema = new mongoose.Schema({
  symbol: String,
  likes: { type: Number, default: 0 },
});
const Stock = mongoose.model('Stock', stockSchema);

// GET request handler for /api/stock-prices
app.get('/api/stock-prices', async (req, res) => {
  const { stock } = req.query;

  if (!Array.isArray(stock)) {
    // Single stock
    const stockData = await getStockData(stock);
    res.json({ stockData });
  } else {
    // Multiple stocks
    const stockData1 = await getStockData(stock[0]);
    const stockData2 = await getStockData(stock[1]);

    const relLikes1 = stockData1.likes - stockData2.likes;
    const relLikes2 = stockData2.likes - stockData1.likes;

    stockData1.rel_likes = relLikes1;
    stockData2.rel_likes = relLikes2;

    res.json({ stockData: [stockData1, stockData2] });
  }
});

async function getStockData(stock) {
  try {
    const response = await axios.get(
      `https://stock-price-checker-proxy.freecodecamp.rocks/v1/stock/${stock}/quote`
    );

    const { symbol, latestPrice } = response.data;

    // Retrieve the stock from the database or create a new one if it doesn't exist
    let stockData = await Stock.findOne({ symbol });
    if (!stockData) {
      stockData = new Stock({ symbol });
    }

    // Update the likes in the database (you can implement the logic to handle likes here)

    stockData.price = latestPrice;
    return stockData;
  } catch (error) {
    console.error(error);
    throw new Error('Failed to fetch stock data');
  }
}

const port = process.env.PORT || 3000;
app.listen(port, function () {
  console.log('Server is running on port ' + port);
});
